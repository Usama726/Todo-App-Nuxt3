{
  "resolvedId": "/home/usama/Documents/projects/Todo-App-Nuxt3/pages/task.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n    <div class=\"mt-36 text-black max-w-custom \">\n        <h1>{{ task.title }}</h1>\n        <!-- <p>{{ task.description }}</p> -->\n    </div>\n</template>\n<script setup>\nimport { storeToRefs } from 'pinia';\nimport { onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { useTodoAppStore } from '~/store/todoStore';\nconst store = useTodoAppStore();\nconst { getColumns } = storeToRefs(store)\nconst columnIndex = useRoute().query.columnIndex\nconst taskIndex = useRoute().query.taskIndex\nconst task = getColumns.value[columnIndex]?.tasks[taskIndex]\nonMounted(() => {\n    store.loadFromLocalStorage\n    console.log(columnIndex, taskIndex, task.value)\n})\n</script>",
      "start": 1713614392786,
      "end": 1713614393192,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713614393192,
      "end": 1713614393192,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713614393192,
      "end": 1713614393192,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713614393192,
      "end": 1713614393192,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713614393192,
      "end": 1713614393192,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1713614393192,
      "end": 1713614393192,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1713614393192,
      "end": 1713614393192,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1713614393192,
      "end": 1713614393192,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1713614393192,
      "end": 1713614393192,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1713614393192,
      "end": 1713614393192,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "import { unref as _unref, mergeProps as _mergeProps } from \"vue\"\nimport { ssrRenderAttrs as _ssrRenderAttrs, ssrInterpolate as _ssrInterpolate } from \"vue/server-renderer\"\n\nimport { storeToRefs } from 'pinia';\nimport { onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { useTodoAppStore } from '~/store/todoStore';\n\nconst _sfc_main = {\n  __name: 'task',\n  __ssrInlineRender: true,\n  setup(__props) {\n\nconst store = useTodoAppStore();\nconst { getColumns } = storeToRefs(store)\nconst columnIndex = useRoute().query.columnIndex\nconst taskIndex = useRoute().query.taskIndex\nconst task = getColumns.value[columnIndex]?.tasks[taskIndex]\nonMounted(() => {\n    store.loadFromLocalStorage\n    console.log(columnIndex, taskIndex, task.value)\n})\n\nreturn (_ctx, _push, _parent, _attrs) => {\n  _push(`<div${\n    _ssrRenderAttrs(_mergeProps({ class: \"mt-36 text-black max-w-custom\" }, _attrs))\n  }><h1>${\n    _ssrInterpolate(_unref(task).title)\n  }</h1></div>`)\n}\n}\n\n}\n\n\n\nimport { useSSRContext as __vite_useSSRContext } from 'vue'\nconst _sfc_setup = _sfc_main.setup\n_sfc_main.setup = (props, ctx) => {\n  const ssrContext = __vite_useSSRContext()\n  ;(ssrContext.modules || (ssrContext.modules = new Set())).add(\"pages/task.vue\")\n  return _sfc_setup ? _sfc_setup(props, ctx) : undefined\n}\nexport default _sfc_main",
      "start": 1713614393192,
      "end": 1713614393193,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/home/usama/Documents/projects/Todo-App-Nuxt3/pages/task.vue"
        ],
        "sourcesContent": [
          "<template>\n    <div class=\"mt-36 text-black max-w-custom \">\n        <h1>{{ task.title }}</h1>\n        <!-- <p>{{ task.description }}</p> -->\n    </div>\n</template>\n<script setup>\nimport { storeToRefs } from 'pinia';\nimport { onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { useTodoAppStore } from '~/store/todoStore';\nconst store = useTodoAppStore();\nconst { getColumns } = storeToRefs(store)\nconst columnIndex = useRoute().query.columnIndex\nconst taskIndex = useRoute().query.taskIndex\nconst task = getColumns.value[columnIndex]?.tasks[taskIndex]\nonMounted(() => {\n    store.loadFromLocalStorage\n    console.log(columnIndex, taskIndex, task.value)\n})\n</script>"
        ],
        "names": [],
        "mappings": ";;;AAOA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;;;;;AAJtC;AAKd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC;;;;;;;;;;;"
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1713614393193,
      "end": 1713614393193,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713614393193,
      "end": 1713614393193,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713614393193,
      "end": 1713614393193,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713614393193,
      "end": 1713614393193,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713614393193,
      "end": 1713614393193,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1713614393193,
      "end": 1713614393193,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713614393193,
      "end": 1713614393193,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1713614393193,
      "end": 1713614393194,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1713614393194,
      "end": 1713614393194,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1713614393194,
      "end": 1713614393194,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1713614393194,
      "end": 1713614393194,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1713614393194,
      "end": 1713614393194,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1713614393194,
      "end": 1713614393194,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1713614393194,
      "end": 1713614393194,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1713614393194,
      "end": 1713614393194,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1713614393194,
      "end": 1713614393194,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713614393194,
      "end": 1713614393194,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713614393194,
      "end": 1713614393194,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713614393194,
      "end": 1713614393196,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713614393194,
      "end": 1713614393196,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713614393196,
      "end": 1713614393196,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713614393196,
      "end": 1713614393196,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713614393196,
      "end": 1713614393196,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713614393196,
      "end": 1713614393196,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1713614393196,
      "end": 1713614393196,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1713614393196,
      "end": 1713614393196,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "result": "import { unref as _unref, mergeProps as _mergeProps } from \"vue\"\nimport { ssrRenderAttrs as _ssrRenderAttrs, ssrInterpolate as _ssrInterpolate } from \"vue/server-renderer\"\n\nimport { storeToRefs } from 'pinia';\nimport { onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { useTodoAppStore } from '~/store/todoStore';\n\nconst _sfc_main = {\n  __name: 'task',\n  __ssrInlineRender: true,\n  setup(__props) {\n\nconst store = useTodoAppStore();\nconst { getColumns } = storeToRefs(store)\nconst columnIndex = useRoute().query.columnIndex\nconst taskIndex = useRoute().query.taskIndex\nconst task = getColumns.value[columnIndex]?.tasks[taskIndex]\n false && /*@__PURE__*/ onMounted(() => {\n    store.loadFromLocalStorage\n    console.log(columnIndex, taskIndex, task.value)\n})\n\nreturn (_ctx, _push, _parent, _attrs) => {\n  _push(`<div${\n    _ssrRenderAttrs(_mergeProps({ class: \"mt-36 text-black max-w-custom\" }, _attrs))\n  }><h1>${\n    _ssrInterpolate(_unref(task).title)\n  }</h1></div>`)\n}\n}\n\n}\n\n\n\nimport { useSSRContext as __vite_useSSRContext } from 'vue'\nconst _sfc_setup = _sfc_main.setup\n_sfc_main.setup = (props, ctx) => {\n  const ssrContext = __vite_useSSRContext()\n  ;(ssrContext.modules || (ssrContext.modules = new Set())).add(\"pages/task.vue\")\n  return _sfc_setup ? _sfc_setup(props, ctx) : undefined\n}\nexport default _sfc_main",
      "start": 1713614393196,
      "end": 1713614393197,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChiCAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC;AACF;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChlC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnjF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC;AACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC"
      }
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1713614393197,
      "end": 1713614393197,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1713614393197,
      "end": 1713614393197,
      "order": "normal"
    }
  ]
}
