{"version":3,"file":"HomePage-Br5bMXte.js","sources":["../../../../components/AddColumnPopup.vue","../../../../components/EditTaskPopup.vue","../../../../pages/HomePage.vue"],"sourcesContent":["<template>\n\n    <div>\n        <div :show=\"showAddColumnModel\">\n            <div\n                class=\"z-50 fixed h-screen flex items-center justify-center inset-0 bg-black bg-opacity-50 transition-opacity\">\n                <div class=\"fixed inset-0 top-[25%] z-10 px-4\">\n                    <div\n                        class=\"relative flex w-full transform flex-col gap-y-2 overflow-auto rounded-lg bg-white p-4 text-left transition-all mx-auto sm:w-10/12 md:w-8/12 lg:w-6/12 xl:w-4/12\">\n                        <div class=\"flex items-center justify-between\">\n                            <div>\n                                <p class=\"text-base font-medium\"> Write a precise title for a column</p>\n                                <p class=\"text-base font-medium\">i.e ( In progress, To do )</p>\n                            </div>\n                            <div class=\" flex justify-end  hover:bg-gray-200 rounded-lg p-2 cursor-pointer\">\n                                <TheCrossIcon @click=\"$emit('close')\" />\n                            </div>\n                        </div>\n                        <form @submit.prevent=\"submitForm\" class=\"w-full flex flex-col gap-4\">\n                            <div class=\"w-full flex flex-col gap-3\">\n                                <div>\n                                    <label for=\"task-title\" class=\"text-sm\">\n                                        Column title\n                                    </label>\n                                    <textarea type=\"text\" v-model=\"column.title\"\n                                        class=\"  mt-1 block w-full rounded-lg border border-gray-300 p-3 pl-4 shadow-sm placeholder:text-zinc-500 focus:border-blue-800 focus:outline-blue-800 focus:ring-blue-800 sm:text-sm\"\n                                        placeholder=\"Enter your column title\" required=\"true\" />\n                                </div>\n\n                            </div>\n                            <div class=\"flex items-center justify-end gap-3\">\n                                <Button type=\"submit\"\n                                    class=\" border-2 border-gray-400 px-4 py-2 rounded-lg text-gray-700 hover:bg-gray-200 text-xl\"\n                                    @click=\"$emit('close')\">Cancel</Button>\n                                <TheButton class=\"text-end\" type=\"submit\" button-text=\"Add Column\" />\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup>\nconst currentDate = ref(new Date());\nconst formattedTime = ref('');\nconst formattedDate = ref('');\n\nonMounted(() => {\n    formatDate();\n    formatTime();\n});\n\nconst formatDate = () => {\n    formattedDate.value = currentDate.value.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n    });\n}\n\nconst formatTime = () => {\n    formattedTime.value = currentDate.value.toLocaleTimeString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n    });\n}\n\nconst column = ref({\n    title: '',\n    createdAt: formattedDate,\n})\n// const title = ref('');\n\ndefineProps({\n    showAddColumnModel: {\n        type: Boolean,\n        default: false,\n    },\n})\nconst emit = defineEmits(['close', 'addColumn'])\nconst submitForm = () => {\n    emit('addColumn', column.value)\n    column.value = {}\n}\n</script>\n\n<style lang=\"scss\" scoped></style>","<template>\n    <div :show=\"showModel\">\n        <div\n            class=\"z-50 fixed h-screen flex items-center justify-center inset-0 bg-black bg-opacity-50 transition-opacity \">\n            <div class=\"fixed inset-0 top-[25%] px-4 \">\n                <div\n                    class=\"relative flex w-full transform flex-col gap-y-2 overflow-auto rounded-lg bg-white p-4 text-left transition-all mx-auto sm:w-10/12 md:w-8/12 lg:w-6/12 xl:w-4/12\">\n                    <div class=\"flex items-center justify-between\">\n                        <p class=\"text-lg font-medium text-black\">Edit task: {{ task.title }}</p>\n                        <div class=\" flex justify-end hover:bg-gray-200 rounded-lg p-2 cursor-pointer  text-black\"\n                            @click=\"$emit('close')\">\n                            <TheCrossIcon />\n                        </div>\n                    </div>\n                    <form @submit.prevent=\"updateValues\" class=\"w-full flex flex-col gap-4\">\n                        <div class=\"w-full flex flex-col gap-3\">\n                            <div>\n                                <label for=\"task-title\" class=\"text-xs\">\n                                    Edit task title\n                                </label>\n                                <input type=\"text\" v-model=\"editedTask.title\"\n                                    class=\"text-black block w-full rounded-lg border border-gray-400 p-3 pl-4 shadow-sm placeholder:text-zinc-400 focus:border-blue-800 focus:outline-blue-800 focus:ring-blue-800 sm:text-sm\" />\n                            </div>\n                            <div>\n                                <label for=\"task-title\" class=\"text-xs\">\n                                    Edit task description\n                                </label>\n                                <textarea rows=\"4\" type=\"text\" v-model=\"editedTask.description\"\n                                    class=\"text-black block w-full rounded-lg border border-gray-400 p-3 pl-4 shadow-sm placeholder:text-zinc-400 focus:border-blue-800 focus:outline-blue-800 focus:ring-blue-800 sm:text-sm\"></textarea>\n                            </div>\n\n                        </div>\n                        <div class=\"flex items-center justify-end gap-3\">\n                            <Button type=\"button\"\n                                class=\" border-2 border-gray-400 px-4 py-2 rounded-lg text-gray-700 hover:bg-gray-200 text-xl\"\n                                @click=\"$emit('close')\">Cancel</Button>\n                            <TheButton type=\"submit\" button-text=\"Save\" />\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script setup>\n// const { task, showModel } = defineProps()\nconst props = defineProps({\n    showModel: {\n        type: Boolean,\n        default: false,\n    },\n    task: {\n        type: Object,\n        default: {},\n    },\n})\nconst taskTitle = ref(props.task.title)\nconst emit = defineEmits(['close', 'save-task'])\n\nconst editedTask = ref({ ...props.task })\nfunction updateValues() {\n    emit('save-task', editedTask.value)\n}\n</script>","<template>\n\n    <div class=\"p-4\">\n        <div class=\" w-full max-w-custom mx-auto flex justify-between mt-2 \">\n            <TheButton buttonText=\"Add Column\" @click=\"openAddColumnModel = true\" />\n            <TheButton buttonText=\"Clear Task Board\" @click=\"openDeleteConfirmation(null, null, 'all')\" />\n        </div>\n        <AddColumnPopup v-if=\"openAddColumnModel\" @addColumn=\"addColumn\" show-add-column-model=\"openAddColumnModel\"\n            @close=\"openAddColumnModel = false\" />\n        <div>\n            <div\n                class=\" flex overflow-x-scroll scroll-smooth gap-4 overflow-y-hidden no-scrollbar  h-auto max-h-[80vh] w-full max-w-custom mx-auto  mt-6 z-50 rounded-lg\">\n                <div v-for=\"(column, columnIndex) in   columns  \" :key=\"columnIndex\"\n                    class=\"w-[320px] max-h-[80vh]  bg-black rounded-xl\" @dragover.prevent\n                    @drop=\"moveColumn(columnIndex)\" draggable=\"true\" @dragstart=\"dragColumnIndex = columnIndex\"\n                    @dragend=\"updateColumnOrder\">\n\n                    <div class=\" flex z-20 items-start justify-between bg-black p-2  w-[320px] rounded-xl \">\n                        <div class=\" w-full text-gray-300\">\n                            <h2 class=\" p-2 text-lg font-medium\" @click=\" editColumnTitle(columnIndex)\"\n                                v-if=\"!column.editing\">{{ column.title.title }}\n                            </h2>\n                            <textarea type=\"text\"\n                                class=\"p-2 text-lg font-medium  w-[100%] no-scrollbar text-wrap focus:ring-gray-400 bg-transparent\"\n                                v-model=\"column.title.title\" v-else @blur=\"saveColumnTitle(columnIndex)\"\n                                @keydown.enter=\"saveColumnTitle(columnIndex)\" ref=\"columnInput\" />\n                            <div class=\"flex items-center justify-between w-full\">\n                                <p class=\"text-gray-300 pl-2 \">{{ column.date.createdAt }}</p>\n                                <p> {{ column.tasks.length }} Cards</p>\n                            </div>\n                        </div>\n                        <div class=\"group relative \">\n                            <button class=\" text-black\">\n                                <svg class=\"h-6 w-6 cursor-pointer mt-2 \" viewBox=\"0 0 24 24\" fill=\"none\"\n                                    xmlns=\"http://www.w3.org/2000/svg\">\n                                    <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n                                    <g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                                    </g>\n                                    <g id=\"SVGRepo_iconCarrier\">\n                                        <path\n                                            d=\"M14 5C14 6.10457 13.1046 7 12 7C10.8954 7 10 6.10457 10 5C10 3.89543 10.8954 3 12 3C13.1046 3 14 3.89543 14 5Z\"\n                                            fill=\"#ffffff\"></path>\n                                        <path\n                                            d=\"M14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z\"\n                                            fill=\"#ffffff\"></path>\n                                        <path\n                                            d=\"M12 21C13.1046 21 14 20.1046 14 19C14 17.8954 13.1046 17 12 17C10.8954 17 10 17.8954 10 19C10 20.1046 10.8954 21 12 21Z\"\n                                            fill=\"#ffffff\"></path>\n                                    </g>\n                                </svg>\n                            </button>\n                            <div tabindex=\"0\"\n                                class=\" border-4 z-10 border-gray-400 invisible w-40 absolute right-2 top-[-0.5rem] transition-all opacity-0 group-hover:visible group-hover:opacity-100 group-hover:translate-y-1 rounded-lg\">\n                                <ul class=\" bg-gray-600 overflow-hidden\">\n                                    <li>\n                                        <p @click=\"showTaskInput(columnIndex)\"\n                                            class=\" border-b-4 cursor-pointer block px-4 py-2 hover:bg-gray-500 text-white\">\n                                            Add Task\n                                        </p>\n                                    </li>\n                                    <li>\n                                        <p @click=\"openDeleteConfirmation(column.title, columnIndex, 'column')\" class=\" cursor-pointer block px-4 py-2 hover:bg-gray-500\n                                                text-white\">\n                                            Delete Column\n                                        </p>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                        <!-- <div v-if=\"activeColumn === columnIndex && showButtons === true\"\n                                class=\"z-20 w-40 text-white rounded-lg border-4 border-white/50 absolute top-8 right-0 text-base font-normal bg-gray-600 \">\n\n                                <p class=\" border-b-4 block px-4 py-2 hover:bg-gray-500 cursor-pointer text-center \"\n                                    @click=\"showTaskInput(columnIndex)\">\n                                    Add Task\n                                </p>\n                                <p @click=\"openDeleteConfirmation(column.title, columnIndex, 'column')\"\n                                    class=\" cursor-pointer block px-4 py-2 hover:bg-gray-500 text-center\">\n                                    Delete Column\n                                </p>\n                            </div> -->\n                        <!-- <div class=\"relative group\" @click=\"toggleButtons(columnIndex)\">\n\n                        </div> -->\n                    </div>\n\n                    <div class=\" flex flex-col h-[76vh] overflow-y-auto no-scrollbar \">\n                        <form v-if=\"activeColumn === columnIndex && openAddTaskModel === true\"\n                            @submit.prevent=\"addTask(columnIndex)\" class=\" z-30 flex flex-col gap-2 p-2 w-full \"\n                            :class=\"openAddTaskModel === true ? 'sticky top-0 ' : ''\">\n                            <input type=\" text\" v-model=\"task.title\" placeholder=\"Add Title\" required\n                                class=\"text-white p-2 border border-gray-300 rounded-lg bg-transparent focus:ring-gray-200 focus:border-gray-200 focus:outline-gray-600\">\n                            <textarea type=\"text\" v-model=\"task.description\" placeholder=\"Add description\" required\n                                class=\"text-white p-2 border border-gray-300 rounded-lg bg-transparent focus:ring-gray-200 focus:border-gray-200 focus:outline-gray-600\"></textarea>\n                            <div class=\"flex justify-end items-center gap-2\">\n                                <Button type=\"submit\"\n                                    class=\" border-2 border-gray-300 px-4 py-2 rounded-lg text-white hover:bg-gray-500 text-xl\"\n                                    @click=\"openAddTaskModel = false\">Cancel</Button>\n                                <TheButton type=\"submit\" button-text=\"Add task\" />\n\n                            </div>\n\n                        </form>\n\n                        <!-- draggable=\"true\" @dragstart=\"dragStart(colIndex, taskIndex)\" @dragover=\"dragOver\"\n                        @drop=\"dropTask(colIndex, taskIndex)\" -->\n\n                        <!-- :to=\"`/task?columnIndex=${columnIndex}&taskIndex=${taskIndex}`\"\n                         -->\n                        <div class=\" relative w-full overflow-y-auto scroll-smooth no-scrollbar  p-2 mb-2 pb-32\">\n                            <div v-for=\"(task, taskIndex) in column.tasks\" :key=\"taskIndex\"\n                                class=\" flex bg-zinc-800 hover:border-gray-400 hover:border items-start rounded-lg gap-4 my-3 mx-auto w-full\">\n                                <p class=\" p-2 rounded-xl w-full text-gray-200 cursor-pointer text-lg font-light\"\n                                    @click=\"openEditForm(columnIndex, taskIndex)\">{{\n                task.title }}</p>\n                                <div class=\"group relative pt-2\">\n                                    <button class=\" text-black\">\n                                        <svg class=\"h-6 w-6 cursor-pointer \" viewBox=\"0 0 24 24\" fill=\"none\"\n                                            xmlns=\"http://www.w3.org/2000/svg\">\n                                            <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n                                            <g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\"\n                                                stroke-linejoin=\"round\">\n                                            </g>\n                                            <g id=\"SVGRepo_iconCarrier\">\n                                                <path\n                                                    d=\"M14 5C14 6.10457 13.1046 7 12 7C10.8954 7 10 6.10457 10 5C10 3.89543 10.8954 3 12 3C13.1046 3 14 3.89543 14 5Z\"\n                                                    fill=\"#ffffff\"></path>\n                                                <path\n                                                    d=\"M14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z\"\n                                                    fill=\"#ffffff\"></path>\n                                                <path\n                                                    d=\"M12 21C13.1046 21 14 20.1046 14 19C14 17.8954 13.1046 17 12 17C10.8954 17 10 17.8954 10 19C10 20.1046 10.8954 21 12 21Z\"\n                                                    fill=\"#ffffff\"></path>\n                                            </g>\n                                        </svg>\n                                    </button>\n                                    <div tabindex=\"0\"\n                                        class=\" border-4 z-10 border-gray-400 invisible w-40 absolute right-2 top-[-0.5rem] transition-all opacity-0 group-hover:visible group-hover:opacity-100 group-hover:translate-y-1 rounded-lg\">\n                                        <ul class=\" bg-gray-600 overflow-hidden\">\n                                            <li>\n                                                <p @click=\"openEditForm(columnIndex, taskIndex)\"\n                                                    class=\" border-b-4 cursor-pointer block px-4 py-2 hover:bg-gray-500 text-white\">\n                                                    Edit Task\n                                                </p>\n                                            </li>\n                                            <li>\n                                                <p @click=\"openDeleteConfirmation(task.title, taskIndex, 'task', columnIndex)\"\n                                                    class=\" cursor-pointer block px-4 py-2 hover:bg-gray-500\n                                                    text-white\">\n                                                    Delete Task\n                                                </p>\n                                            </li>\n\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                            <!-- <p class=\"text-gray-400 font bold text-lg p-2 \" v-if=\"!openAddTaskModel\"\n                                button-text=\"Add task\" @click=\"showTaskInput(columnIndex)\">\n                                <span class=\"text-2xl\">+</span> Add Task\n                            </p> -->\n                        </div>\n                    </div>\n                </div>\n                <form v-if=\"showForm\" @submit.prevent=\"addColumnAtEnd\" class=\" z-30 flex flex-col gap-4 w-[325px] \">\n                    <textarea type=\" text\" v-model=\"column.title\" placeholder=\"Enter column title\" required\n                        class=\"text-white p-2 w-[325px] bg-black rounded-xl focus:ring-gray-200 focus:border-gray-200 focus:outline-none\" />\n\n                    <div class=\"flex justify-end items-center gap-2\">\n                        <div class=\" border-2 border-gray-300 px-4 py-2 rounded-lg text-white hover:bg-gray-700 cursor-pointer text-xl\"\n                            @click=\"showForm = false\">\n                            <TheCrossIcon />\n                        </div>\n                        <TheButton type=\"submit\" button-text=\"Add Column\" />\n                    </div>\n                </form>\n\n                <TheButton v-if=\"!showForm && columns.length > 0\" buttonText=\"Add Column\" @click=\"showForm = true\"\n                    class=\"w-[325px] \" />\n            </div>\n        </div>\n        <EditTaskPopup v-if=\"editTaskModel\" :show-model=\"editTaskModel\" @close=\"editTaskModel = false\"\n            :task=\"editedTask\" @save-task=\"updateTask\" />\n        <ConfirmDeletePopup v-if=\"openDeleteModel\" :show-model=\"openDeleteModel\" @close=\"openDeleteModel = false\"\n            :delete-text=\"deleteConfirmationMessage\" :delete-confirmation-for=\"deleteConfirmationValue\"\n            @confirm=\"deleteAction\" @success=\"triggerSuccessMessage\" />\n        <ConfirmSuccessPopup :message=\"successMessage\" :show=\"showSuccessMessage\" />\n    </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { useTodoAppStore } from '~/store/todoStore';\nconst store = useTodoAppStore();\n\n//  Variables\n\nconst showForm = ref(false)\nconst openDeleteModel = ref(false)\nconst editTaskModel = ref(false)\nconst successMessage = ref('');\nconst showSuccessMessage = ref(false);\nconst deleteConfirmationMessage = ref('');\nconst deleteConfirmationValue = ref('')\nconst deleteConfirmationAction = ref('');\nconst columnToDeleteIndex = ref(null)\nconst colIndexForTask = ref(null)\nconst columns = ref([]);\nconst currentDate = ref(new Date());\nconst formattedTime = ref('');\nconst formattedDate = ref('');\nconst openAddColumnModel = ref(false)\nconst showButtons = ref(false)\nconst openAddTaskModel = ref(false)\nconst activeColumn = ref(null)\nlet dragColumnIndex = ref(null)\nlet dragTaskIndex = ref(null)\nconst editColumnIndex = ref(null)\nconst editTaskIndex = ref(null)\nconst editedTask = ref(null)\nlet dragData = null\nconst column = ref({\n    title: '',\n    createdAt: formattedDate,\n})\n\nconst task = ref({\n    title: '',\n    description: '',\n    createdAt: formattedDate,\n})\n\n// Functions\nfunction editColumnTitle(columnIndex) {\n    columns.value[columnIndex].editing = true\n    nextTick(() => {\n        const input = this.$refs.columnInput\n        input.focus()\n        // input.select()\n    })\n    store.editColumnTitle(columnIndex, columns.value[columnIndex].title)\n}\nfunction saveColumnTitle(columnIndex) {\n    columns.value[columnIndex].editing = false\n}\nconst openDeleteConfirmation = (title, index, action, colIndex) => {\n    openDeleteModel.value = true\n    columnToDeleteIndex.value = index\n    colIndexForTask.value = colIndex\n    deleteConfirmationAction.value = action;\n    if (action === 'column') {\n        deleteConfirmationValue.value = ' column'\n        deleteConfirmationMessage.value = title.title;\n    } else if (action === 'task') {\n        deleteConfirmationValue.value = 'task'\n        deleteConfirmationMessage.value = title;\n    } else if (action === 'all') {\n        deleteConfirmationValue.value = ''\n        deleteConfirmationMessage.value = \"Entire task board \";\n    }\n    console.log(deleteConfirmationMessage.value)\n}\n\nconst deleteAction = () => {\n    if (deleteConfirmationAction.value === 'column') {\n        if (columnToDeleteIndex.value !== null) {\n            deleteColumn(columnToDeleteIndex.value)\n        }\n        triggerSuccessMessage('Column deleted successfully')\n    } else if (deleteConfirmationAction.value === 'task') {\n        deleteTask(colIndexForTask.value, columnToDeleteIndex.value)\n        triggerSuccessMessage('Task deleted successfully')\n    } else if (deleteConfirmationAction.value === 'all') {\n\n        deleteAllColumns()\n        triggerSuccessMessage('All columns deleted successfully')\n        columns.value = store.loadFromLocalStorage();\n\n    }\n    openDeleteModel.value = false\n\n}\nconst triggerSuccessMessage = (message) => {\n    successMessage.value = message;\n    showSuccessMessage.value = true;\n    setTimeout(() => {\n        showSuccessMessage.value = false;\n    }, 5000);\n}\nconst toggleButtons = (colIndex) => {\n    setActiveColumn(colIndex)\n    showButtons.value = !showButtons.value\n}\nconst setActiveColumn = (index) => {\n    activeColumn.value = index;\n};\nconst showTaskInput = (colIndex) => {\n    setActiveColumn(colIndex)\n    openAddTaskModel.value = true\n\n}\n\nconst formatDate = () => {\n    formattedDate.value = currentDate.value.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n    });\n}\n\nconst formatTime = () => {\n    formattedTime.value = currentDate.value.toLocaleTimeString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n    });\n}\nconst addColumn = (column) => {\n    if (column.title.trim() !== '') {\n        store.addColumn(column);\n        triggerSuccessMessage('Column Added successfully')\n    }\n    console.log(column)\n    openAddColumnModel.value = false\n};\n\nconst addColumnAtEnd = () => {\n\n    store.addColumnAtEnd(column.value);\n    showForm.value = false\n    // column.value = {}\n    triggerSuccessMessage('Column Added successfully')\n};\n\nconst deleteColumn = (index) => {\n    store.deleteColumn(index)\n    openDeleteModel.value = false;\n}\n\nconst deleteAllColumns = () => {\n    store.deleteAllColumns()\n    columns.value = store.columns\n}\nconst moveColumn = (toIndex) => {\n    if (dragColumnIndex !== null && dragColumnIndex !== toIndex) {\n        store.moveColumn(dragColumnIndex.value, toIndex)\n        dragColumnIndex.value = toIndex\n        columns.value = store.columns\n    }\n}\nconst updateColumnOrder = () => {\n    // Ensure immediate update of columns order after drag and drop\n    // This method gets triggered when the drag operation ends\n    store.columns = [...store.columns]\n}\n\nconst addTask = (columnIndex) => {\n    store.addTask(columnIndex, task.value)\n    task.value = {\n        title: '',\n        description: '',\n    }\n    openAddTaskModel.value = false\n    triggerSuccessMessage('Task Added successfully')\n}\nconst openEditForm = (columnIndex, taskIndex) => {\n    editedTask.value = { ...columns.value[columnIndex].tasks[taskIndex] }\n    editColumnIndex.value = columnIndex\n    editTaskIndex.value = taskIndex\n    editTaskModel.value = true\n}\n\nconst updateTask = (editedTask) => {\n    store.updateTask(editColumnIndex.value, editTaskIndex.value, editedTask)\n    editedTask.value = null\n    editColumnIndex.value = null\n    editTaskIndex.value = null\n    editTaskModel.value = false\n}\nconst deleteTask = (columnIndex, taskindex) => {\n    store.deleteTask(columnIndex, taskindex)\n    console.log(columnIndex, taskindex)\n}\n\n// function dragStart(colIndex, taskIndex) {\n//     dragData.value = { colIndex, taskIndex }\n// }\n\n// function dragOver() {\n//     $event.preventDefault()\n// }\n\n// function dropTask(toColIndex, toTaskIndex) {\n//     if (dragData.value) {\n//         const { colIndex: fromColIndex, taskIndex: fromTaskIndex, task } = dragData.value;\n//         store.moveTask(fromColIndex, fromTaskIndex, toColIndex, toTaskIndex, task);\n//         dragData.value = null;\n//     }\n// }\n\n\n//  Lifecycle Hooks\n\nonMounted(() => {\n    formatDate();\n    formatTime();\n});\n\nonBeforeMount(() => {\n    store.loadFromLocalStorage\n    // store.getColumns\n    columns.value = store.loadFromLocalStorage();\n});\nuseHead(({\n    title: 'Todo-App'\n}))\n</script>\n<style scoped>\n#show_hide {\n    display: none;\n}\n</style>"],"names":["column","editedTask"],"mappings":"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"}