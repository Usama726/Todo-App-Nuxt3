{"version":3,"file":"todoStore-CxR8zpuc.js","sources":["../../../../store/todoStore.js"],"sourcesContent":["// store/columns.js\n\nimport { defineStore } from 'pinia';\n\nexport const useTodoAppStore = defineStore({\n    id: 'columns',\n    state: () => ({\n        columns: []\n    }),\n    getters: {\n        getColumns: (state) => state.columns,\n    },\n    actions: {\n\n\n        // About Columns \n\n\n        addColumn(column) {\n            this.columns.unshift({\n                title: column,\n                date: column,\n                tasks: [],\n                showForm: false,\n            });\n            this.saveToLocalStorage();\n        },\n\n        addColumnAtEnd(column) {\n            this.columns.push({\n                title: column,\n                date: column,\n                tasks: [],\n            });\n            this.saveToLocalStorage();\n        },\n\n        editColumnTitle(columnIndex, newTitle) {\n            this.columns[columnIndex].title = newTitle\n            this.saveToLocalStorage();\n        },\n\n        deleteColumn(columnIndex) {\n            this.columns.splice(columnIndex, 1)\n            this.saveToLocalStorage();\n        },\n\n        deleteAllColumns() {\n            this.columns = []\n            this.saveToLocalStorage();\n        },\n\n        moveColumn(fromIndex, toIndex) {\n            const columns = [...this.columns]\n            const [columnToMove] = columns.splice(fromIndex, 1)\n            columns.splice(toIndex, 0, columnToMove)\n            this.columns = columns\n            this.saveToLocalStorage();\n            // return this.getColumns()\n        },\n\n\n        // About Tasks\n\n\n        addTask(columnIndex, task) {\n            this.columns[columnIndex].tasks.unshift(task);\n            this.saveToLocalStorage();\n\n        },\n        deleteTask(columnIndex, taskIndex) {\n            this.columns[columnIndex].tasks.splice(taskIndex, 1)\n            this.saveToLocalStorage();\n        },\n\n        updateTask(columnIndex, taskIndex, updatedTask) {\n\n            this.columns[columnIndex].tasks[taskIndex] = updatedTask;\n            this.saveToLocalStorage();\n\n        },\n\n        // moveTask(sourceColumnIndex, sourceTaskIndex, destinationColumnIndex, destinationTaskIndex, task) {\n        //     // Remove the task from the source column\n        //     const movedTask = this.columns[sourceColumnIndex].tasks.splice(sourceTaskIndex, 1)[0];\n        //     // Insert the task into the destination column\n        //     this.columns[destinationColumnIndex].tasks.splice(destinationTaskIndex, 0, movedTask);\n        //     // If provided, update task data\n        //     if (task) {\n        //         this.updateTask(destinationColumnIndex, destinationTaskIndex, task);\n        //     }\n        // },\n\n        //About Local Storage\n\n\n        loadFromLocalStorage() {\n            const storedColumns = JSON.parse(localStorage.getItem('columns'));\n            if (storedColumns) {\n                return this.columns = storedColumns;\n            }\n        },\n        saveToLocalStorage() {\n            localStorage.setItem('columns', JSON.stringify(this.columns));\n        },\n\n    },\n\n});\n"],"names":[],"mappings":";AAIY,MAAC,kBAAkB,YAAY;AAAA,EACvC,IAAI;AAAA,EACJ,OAAO,OAAO;AAAA,IACV,SAAS,CAAE;AAAA,EACnB;AAAA,EACI,SAAS;AAAA,IACL,YAAY,CAAC,UAAU,MAAM;AAAA,EAChC;AAAA,EACD,SAAS;AAAA;AAAA,IAML,UAAU,QAAQ;AACd,WAAK,QAAQ,QAAQ;AAAA,QACjB,OAAO;AAAA,QACP,MAAM;AAAA,QACN,OAAO,CAAE;AAAA,QACT,UAAU;AAAA,MAC1B,CAAa;AACD,WAAK,mBAAkB;AAAA,IAC1B;AAAA,IAED,eAAe,QAAQ;AACnB,WAAK,QAAQ,KAAK;AAAA,QACd,OAAO;AAAA,QACP,MAAM;AAAA,QACN,OAAO,CAAE;AAAA,MACzB,CAAa;AACD,WAAK,mBAAkB;AAAA,IAC1B;AAAA,IAED,gBAAgB,aAAa,UAAU;AACnC,WAAK,QAAQ,WAAW,EAAE,QAAQ;AAClC,WAAK,mBAAkB;AAAA,IAC1B;AAAA,IAED,aAAa,aAAa;AACtB,WAAK,QAAQ,OAAO,aAAa,CAAC;AAClC,WAAK,mBAAkB;AAAA,IAC1B;AAAA,IAED,mBAAmB;AACf,WAAK,UAAU,CAAE;AACjB,WAAK,mBAAkB;AAAA,IAC1B;AAAA,IAED,WAAW,WAAW,SAAS;AAC3B,YAAM,UAAU,CAAC,GAAG,KAAK,OAAO;AAChC,YAAM,CAAC,YAAY,IAAI,QAAQ,OAAO,WAAW,CAAC;AAClD,cAAQ,OAAO,SAAS,GAAG,YAAY;AACvC,WAAK,UAAU;AACf,WAAK,mBAAkB;AAAA,IAE1B;AAAA;AAAA,IAMD,QAAQ,aAAa,MAAM;AACvB,WAAK,QAAQ,WAAW,EAAE,MAAM,QAAQ,IAAI;AAC5C,WAAK,mBAAkB;AAAA,IAE1B;AAAA,IACD,WAAW,aAAa,WAAW;AAC/B,WAAK,QAAQ,WAAW,EAAE,MAAM,OAAO,WAAW,CAAC;AACnD,WAAK,mBAAkB;AAAA,IAC1B;AAAA,IAED,WAAW,aAAa,WAAW,aAAa;AAE5C,WAAK,QAAQ,WAAW,EAAE,MAAM,SAAS,IAAI;AAC7C,WAAK,mBAAkB;AAAA,IAE1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBD,uBAAuB;AACnB,YAAM,gBAAgB,KAAK,MAAM,aAAa,QAAQ,SAAS,CAAC;AAChE,UAAI,eAAe;AACf,eAAO,KAAK,UAAU;AAAA,MACzB;AAAA,IACJ;AAAA,IACD,qBAAqB;AACjB,mBAAa,QAAQ,WAAW,KAAK,UAAU,KAAK,OAAO,CAAC;AAAA,IAC/D;AAAA,EAEJ;AAEL,CAAC;"}